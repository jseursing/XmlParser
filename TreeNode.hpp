#pragma once
#include <string>
#include <vector>

/*
 * The following class represents a generic TreeNode.
 * 
 * NOTE: 
 * THe source file must be included to avoid linker errors.
 * 
 */
template<class Type>
class TreeNode
{
public:

  /////////////////////////////////////////////////////////////////////////////////////////
  //
  // Function: GetKey
  // Notes:    None
  //
  /////////////////////////////////////////////////////////////////////////////////////////
  std::string GetKey() const
  {
    return Key;
  }

  /////////////////////////////////////////////////////////////////////////////////////////
  //
  // Function: GetValue
  // Notes:    None
  //
  /////////////////////////////////////////////////////////////////////////////////////////
  Type GetValue() const
  {
    return Value;
  }

  /////////////////////////////////////////////////////////////////////////////////////////
  //
  // Function: GetParentNode
  // Notes:    None
  //
  /////////////////////////////////////////////////////////////////////////////////////////
  TreeNode* GetParentNode() const
  {
    return ParentNode;
  }

  /////////////////////////////////////////////////////////////////////////////////////////
  //
  // Function: GetChild
  // Notes:    None
  //
  /////////////////////////////////////////////////////////////////////////////////////////
  TreeNode* GetChild(size_t index)
  {
    if (index < Children.size())
    {
      return Children[index];
    }

    return nullptr;
  }

  /////////////////////////////////////////////////////////////////////////////////////////
  //
  // Function: AddChild
  // Notes:    None
  //
  /////////////////////////////////////////////////////////////////////////////////////////
  void AddChild(TreeNode* childNode)
  {
    Children.push_back(childNode);
  }

  /////////////////////////////////////////////////////////////////////////////////////////
  //
  // Function: GetChildCount
  // Notes:    None
  //
  /////////////////////////////////////////////////////////////////////////////////////////
  uint32_t GetChildCount() const
  {
    return Children.size();
  }

  /////////////////////////////////////////////////////////////////////////////////////////
  //
  // Function: TreeNode
  // Notes:    None
  //
  /////////////////////////////////////////////////////////////////////////////////////////
  TreeNode(std::string key, 
           Type& value,
           TreeNode* parentNode = nullptr) :
    Key(key),
    Value(value),
    ParentNode(parentNode)
  {

  }

  /////////////////////////////////////////////////////////////////////////////////////////
  //
  // Function: ~TreeNode
  // Notes:    None
  //
  /////////////////////////////////////////////////////////////////////////////////////////
  ~TreeNode()
  {
    for (size_t i = 0; i < Children.size(); ++i)
    {
      delete Children[i];
    }

    Children.clear();
  }

private:
  
  std::string Key;
  std::string Value;
  TreeNode* ParentNode;
  std::vector<TreeNode*> Children;
};